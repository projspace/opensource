<?php
// $Id: og_user_roles.test,v 1.4 2009/08/14 15:51:35 sun Exp $

/**
 * @file
 * OG User Roles tests.
 */

require_once drupal_get_path('module', 'og') .'/tests/og_testcase.php';

class OGUserRolesTestCase extends OgTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OG User Roles',
      'description' => 'Test privilege escalation of Organic Groups User Roles.',
      'group' => 'Organic groups',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('views', 'og', 'og_views', 'og_user_roles');

    // Create and log in an administrative user with all permissions.
    $permissions = module_invoke_all('perm');
    $this->admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->admin_user);

    // Create a group node content type.
    $this->og_group_type = $this->drupalCreateContentType();
    variable_set('og_content_type_usage_' . $this->og_group_type->name, 'group');

    // Create a group post content type.
    $this->og_post_type = $this->drupalCreateContentType();
    variable_set('og_content_type_usage_' . $this->og_post_type->name, 'group_post');
    // Enable revisions for group post content type.
    $edit = array(
      'node_options[revision]' => 1,
    );
    $type_url_str = str_replace('_', '-', $this->og_post_type->name);
    $this->drupalPost('admin/content/node-type/' . $type_url_str, $edit, t('Save content type'));

    // Create two groups and a post for each group.
    $this->gid1 = $this->addOgGroup($this->og_group_type->name);
    $this->gid2 = $this->addOgGroup($this->og_group_type->name);
    $this->nid1 = $this->addOgPost($this->og_post_type->name, array($this->gid1));
    $this->nid2 = $this->addOgPost($this->og_post_type->name, array($this->gid2));

    // Rebuild the menu so the new content types will appear in the menu.
    menu_rebuild();

    // Create a web user.
    $web_user = $this->drupalCreateUser(array('access comments', 'access content'));
    $this->web_user = $web_user;

    // Subscribe web user to first group.
    $result = module_invoke('og', 'subscribe_user', $this->gid1, $web_user);
    $this->assertTrue(isset($result['type']) && $result['type'] == 'subscribed', 'Web user subscribed to organic group.');

    // Create a role for OGUR privilege escalation.
    $this->drupalPost('admin/user/roles', array('name' => 'ogur'), 'Add role');
    $this->role_ogur = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'ogur'));
    $this->assertTrue($this->role_ogur > 0, 'User role for OGUR was created.');

    // Allow group admins to assign 'ogur' role.
    $edit = array(
      'og_user_roles_roles_' . $this->og_group_type->name . '[' . $this->role_ogur . ']' => 1,
    );
    $this->drupalPost('admin/og/og_user_roles', $edit, 'Save configuration');

    // Allow users in role 'ogur' to create/edit/delete stories, view revisions,
    // and post comments.
    $edit = array(
      $this->role_ogur . '[create ' . $this->og_post_type->name . ' content]' => 1,
      $this->role_ogur . '[delete any ' . $this->og_post_type->name . ' content]' => 1,
      $this->role_ogur . '[edit any ' . $this->og_post_type->name . ' content]' => 1,
      $this->role_ogur . '[view revisions]' => 1,
      $this->role_ogur . '[post comments]' => 1,
      $this->role_ogur . '[post comments without approval]' => 1,
    );
    $this->drupalPost('admin/user/permissions', $edit, t('Save permissions'));
  }

  /**
   * Test user role escalation.
   */
  function testUserRoleEscalation() {
    // Assign role 'ogur' to web user in first group.
    $edit = array(
      'user_roles[' . $this->web_user->uid . '][' . $this->role_ogur . ']' => 1,
    );
    $this->drupalPost('og/users/' . $this->gid1 . '/roles', $edit, 'Save');
    $this->assertText('The changes have been saved.', 'Role ogur was assigned to user.');

    // Load group posts.
    $node1 = node_load($this->nid1);
    $node2 = node_load($this->nid2);

    // Verify that group posts are displayed on front page.
    $this->drupalGet('');
    $this->assertText($node1->title, 'First group post found on front page.');
    $this->assertText($node2->title, 'Second group post found on front page.');

    // Log in web user.
    $this->drupalLogin($this->web_user);

    // Verify that user is not permitted to create content.
    $this->assertNoLink('Create content');
    // Verify that user can access both group posts.
    $this->drupalGet('');
    $this->assertText($node1->title, 'User can access first group post.');
    $this->assertText($node2->title, 'User can access second group post.');

    // Verify that user cannot edit group post belonging to second group.
    $this->drupalGet('node/' . $node2->nid);
    $this->assertNoLink('Edit');
    $this->assertNoLink('Revisions');

    // Verify that user can edit group post belonging to first group.
    $this->drupalGet('node/' . $node1->nid);
    $this->assertLink('Edit');
    $this->clickLink('Edit');
    $this->drupalPost(NULL, array(), 'Save');
    $t_args = array('@type' => $this->og_post_type->name, '%title' => $node1->title);
    $this->assertRaw(t('@type %title has been updated.', $t_args), 'User can update post in group.');

    // Verify that user can access revisions for first group post.
    $this->assertLink('Revisions');
    $this->clickLink('Revisions');
  }

  /**
   * Test default user role for new members per group.
   */
  function testGroupDefaultUserRole() {
    // Create and log in a group administrative user with content permissions.
    $group_user = $this->drupalCreateUser(array(
      'access content',
      'administer nodes',
    ));
    $this->drupalLogin($group_user);

    // Create a new group and verify group admin user can not modify default
    // role for new members setting.
    $this->drupalGet('node/' . $this->gid1 . '/edit');
    $this->assertNoText(t('Default role for new members:'), 'Group admin user can not override group default role.');

    // Log in admin user.
    $this->drupalLogin($this->admin_user);

    // Edit group gid2 and configure the group default role for new members.
    $edit = array();
    $edit['og_user_roles_default_role'] = $this->role_ogur;
    $this->drupalPost('node/' . $this->gid2 . '/edit', $edit, t('Save'));

    // Create another web user.
    $web_user = $this->drupalCreateUser(array('access comments', 'access content'));

    // Subscribe web user to group gid1 which has group-wide default user role.
    $result = module_invoke('og', 'subscribe_user', $this->gid1, $web_user);
    $this->assertTrue(isset($result['type']) && $result['type'] == 'subscribed', 'Web user subscribed to organic group.');

    // Subscribe web user to group gid2 which has group specific default user role.
    $result = module_invoke('og', 'subscribe_user', $this->gid2, $web_user);
    $this->assertTrue(isset($result['type']) && $result['type'] == 'subscribed', 'Web user subscribed to organic group.');

    // Load group posts.
    $node2 = node_load($this->nid2);

    // Log in web user.
    $this->drupalLogin($web_user);

    // Verify that user cannot edit group post belonging to group gid1.
    $this->drupalGet('node/' . $this->nid1);
    $this->assertNoLink('Edit');

    // Verify that user can edit group post belonging to group gid2.
    $this->drupalGet('node/' . $this->nid2);
    $this->assertLink('Edit');
    $this->clickLink('Edit');
    $this->drupalPost(NULL, array(), 'Save');
    $t_args = array('@type' => $this->og_post_type->name, '%title' => $node2->title);
    $this->assertRaw(t('@type %title has been updated.', $t_args), 'User can update post in group.');
  }
}

