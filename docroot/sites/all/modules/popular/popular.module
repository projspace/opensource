<?php
// $Id$

/**
 * @file
 *
 * Tracks page visits for most popular pages.
 * (c) 2008 Palantir.net
 */

/**
 * Implements hook_menu()
 */
function popular_menu() {
  $items = array();

  $items['admin/config/popular'] = array(
    'title' => 'Popular',
    'description' => 'Popular content settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('popular_settings_form'),
    'access arguments' => array('administer popular'),
  );

  return $items;
}

/**
 * FormsAPI
 */
function popular_settings_form() {
  $form = array();

  $form['popular_reset'] = array(
    '#type' => 'checkbox',
    '#title' => t('Clear current statistics'),
    '#description' => t('Check this box to empty the current statistics.'),
    '#default_value' => 0,
  );

  return system_settings_form($form);
}

/**
 * Validate the settings.
 */
function popular_settings_form_validate($form, &$form_state) {
  // If there is a delete request, execute it. 
  if ($form_state['values']['popular_reset'] == 1)  {
    db_query("DELETE FROM {popular}");
    drupal_set_message(t('The statistics have been reset.'));
  }
}

/**
 * Internal variables hook,
 *
 * @param $name
 * The name of the variable.
 * @param $all
 * If TRUE, return the entire array (used for uninstalling the module).
 * @return
 * The variable_get($name, $default_value) with a default string.
 */
function popular_variable($name, $all = FALSE) {
  $vars = array(
    'types' => array(),
  );
  if ($all) {
    return array_keys($vars);
  }
  return variable_get('popular_'. $name, $vars[$name]);
}

/**
 * Implements hook_exit()
 *
 * This function inserts page view statistics for all cases except email.
 * Emails are handled separately, since they are invoked by a form posting.
 */
function popular_exit($destination = NULL) {
  // Do nothing on form submissions.
  if (!empty($_POST) || !empty($destination)) {
    return;
  }
  // Get the page information.
  $data = popular_parse_path();
  if (!empty($data['nid'])) {
    _popular_save_data($data);
  }
}

/**
 * Takes the data from this page view and stores our custom statistics.
 *
 * @param $data
 *   The page data derived by popular_parse_path().
 */
function _popular_save_data($data) {
  watchdog('popular', print_r($data, TRUE));
  $hour = date("G");

  // We have several types of data that we might store, but they are all related.
  // If the update works, then we are done.
  db_query("UPDATE {popular} SET hit_count = hit_count + 1 WHERE nid = %d AND channel = %d AND hour = %d", $data['nid'], $data['channel'], $hour);

  if (!db_affected_rows()) {
    // First, simple data by node type or comment.
    db_query("INSERT INTO {popular} (nid, channel, hit_count, hour) VALUES (%d, '%s', %d, %d)",
      $data['nid'], $data['channel'], 1, $hour);
  }
  
  watchdog('popular', 'counting '. $data['page_title'] .' in '. $data['channel']. '.');
}

/**
 * Implements hook_cron().
 */
function popular_cron() {
  $nexthour = (date("G")+1) % 24;
  db_query("UPDATE {popular} SET hit_count = 0 WHERE hour = %d", $nexthour);
  db_query("DELETE FROM {cache_block} WHERE cid LIKE 'popular:popular:sitetheme%'"); 
}

/**
 * Implements hook_block().
 */
function popular_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'popular' => array(
        'info' => t('Most Viewed'),
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
    );
  }
  $func = 'popular_block_'. $op;
  if (function_exists($func)) {
    return $func($op, $delta, $edit);
  }
}

/**
 * Block view hook.
 */
function popular_block_view($op, $delta, $edit) {
  $channels = array('business', 'education', 'government', 'law', 'life');

  $path = drupal_lookup_path('source', $_GET['q']);
  if ($path === FALSE) {
    $path = $_GET['q'];
  }
  $channel = arg(0, drupal_get_path_alias($path));
  watchdog('popular', $channel);
  
  $block['subject'] = t('Most Viewed');
  $output = '';
  $rows = array();

  if (in_array($channel, $channels)) {
    $result = db_query_range(db_rewrite_sql("SELECT DISTINCT(n.nid), n.title, SUM(p.hit_count) FROM {node} n INNER JOIN {popular} p ON n.nid = p.nid WHERE p.channel = '%s' GROUP BY p.nid ORDER BY SUM(p.hit_count) DESC"), $channel, 0, 10);
    while ($data = db_fetch_object($result)) {
      $rows[] = array(
        l($data->title, "node/$data->nid"),
      );
    }
  }
  else {
    $result = db_query_range(db_rewrite_sql("SELECT DISTINCT(n.nid), n.title, SUM(p.hit_count), g.group_nid as group_nid, gn.title as group_title FROM {node} n INNER JOIN {popular} p ON n.nid = p.nid INNER JOIN {og_ancestry} g ON g.nid = n.nid LEFT JOIN {node} gn ON gn.nid = g.group_nid GROUP BY p.nid ORDER BY SUM(p.hit_count) DESC"), 0, 10);    
    while ($data = db_fetch_object($result)) {
      $rows[] = array(
        '<div class="views-field-group-nid">Open '. l($data->group_title, "node/$data->group_nid") .' &raquo </div>'. l($data->title, "node/$data->nid"),
      );
    }
  }
  
  $output .= theme('item_list', $rows, NULL, 'ul');
  $block['content'] = $output;
  return $block;
}

function popular_parse_path() {
  $vars = array();

  $path = drupal_lookup_path('source', $_GET['q']);
  if ($path === FALSE) {
    $path = $_GET['q'];
  }
  
  $arg = arg(0, $path);
  if ($arg == 'admin') {
    return $vars;
  }

  $func = '_popular_parse_'. $arg;
   // We can only parse things that we comprehend.
  if (function_exists($func)) {
    $vars = $func($path);

    // if $vars returned with data, that means we are viewing an post,
    // which means it is in a channel, which means we can get that channel
    // out of the path.
    if (!empty($vars['nid'])) {
      $alias = drupal_get_path_alias($path);
      $vars['channel'] = arg(0, $alias);
    }
  }  
  return $vars;
}

/**
 * Helper function to load the node data we need without node_load().
 *
 * @param $nid
 *   The node id.
 * @return
 *   A partial node object.
 */
function _popular_node_load($nid) {
  $node = db_fetch_object(db_query("SELECT nid, title, type FROM {node} WHERE nid = %d AND status = 1", $nid));
  if (!empty($node->nid) && $node->type == 'post') {
    return $node;
  }
}

/**
 * Helper function to derive node data.
 */
function _popular_parse_node($path) {
  // We must have a node id that is valid.
  $nid = (int) arg(1, $path);
  $action = arg(2, $path);
  // We do not act on paths list /edit.
  $omit = array('edit', 'devel');
  if ($nid > 0 && !in_array($action, $omit)) {
    // node_load() is not yet available and excessive, so we have a cheater version.
    $node = _popular_node_load($nid);
    if (!empty($node->nid)) {
      return array(
        'nid' => $node->nid,
        'page_title' => check_plain($node->title),
      );
    }
  }
}
